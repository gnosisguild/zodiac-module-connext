{
  "ConnextModule": {
    "1.0.0": {
      "contractName": "ConnextModule",
      "sourceName": "contracts/ConnextModule.sol",
      "contractVersion": "1.0.0",
      "compilerVersion": "v0.8.20+commit.a1b79de6",
      "factory": "0xce0042b868300000d44a59004da54a005ffdcf9f",
      "address": "0x8E7e1A463732bc1aD703b34d06f2efc7B3DCad40",
      "bytecode": "0x60806040523480156200001157600080fd5b5060405162002ff438038062002ff4833981810160405281019062000037919062000c7c565b6000868686868686604051602001620000569695949392919062000d3a565b604051602081830303815290604052905062000078816200008560201b60201c565b50505050505050620010a7565b6000620000976200049160201b60201c565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015620000e65750825b9050600060018367ffffffffffffffff161480156200011c575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156200012b575080155b1562000163576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315620001b45760018560000160086101000a81548160ff0219169083151502179055505b6000806000806000808b806020019051810190620001d3919062000dec565b955095509550955095509550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160362000251576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002489062000ee9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603620002c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002ba9062000f5b565b60405180910390fd5b620002d433620004b960201b60201c565b620002e585620004dd60201b60201c565b620002f684620005b160201b60201c565b62000307836200068760201b60201c565b6200031882620007a860201b60201c565b62000329816200082760201b60201c565b6200033a86620008d660201b60201c565b7ffbecf7f616d45ca601cf03f4f9ffe701a5075bb7372227842c496db02bd3aecd6200036b620009b560201b60201c565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360149054906101000a900463ffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516200041c9695949392919062000d3a565b60405180910390a15050505050508315620004895760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405162000480919062000fde565b60405180910390a15b505050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b620004c9620009f560201b60201c565b620004da8162000a3e60201b60201c565b50565b620004ed62000ad760201b60201c565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f52ae88b092de36f87fb43fe794eb1381023b9c1bce563a871154022c63dce34260405160405180910390a35050565b620005c162000ad760201b60201c565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f90cc2f570a6eb594b1580ea3e41247d2d73a55281889e86bd4ec2fc29c7e62d660405160405180910390a35050565b6200069762000ad760201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000700906200104b565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f54301631e962ee8d9655adadf9ff34e8027ac0a2a36ba16f0bf24f05ebb97a84600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516200079d91906200106d565b60405180910390a150565b620007b862000ad760201b60201c565b80600360146101000a81548163ffffffff021916908363ffffffff1602179055507f2129f7c349bc9434d7098c42eb37a2df23cc694bf18743a747305cf2430bdb71600360149054906101000a900463ffffffff166040516200081c91906200108a565b60405180910390a150565b6200083762000ad760201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f08c3335cb99fd4f1aef7ddc8d0fefc3709ad4c2b80690bcd09000387de510f5f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051620008cb91906200106d565b60405180910390a150565b6000620008e862000b7960201b60201c565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b600080620009c862000b7960201b60201c565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b62000a0562000ba160201b60201c565b62000a3c576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b62000a4e620009f560201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000ac35760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162000aba91906200106d565b60405180910390fd5b62000ad481620008d660201b60201c565b50565b62000ae762000bc960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000b0d620009b560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000b775762000b3962000bc960201b60201c565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040162000b6e91906200106d565b60405180910390fd5b565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600062000bb36200049160201b60201c565b60000160089054906101000a900460ff16905090565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000c038262000bd6565b9050919050565b62000c158162000bf6565b811462000c2157600080fd5b50565b60008151905062000c358162000c0a565b92915050565b600063ffffffff82169050919050565b62000c568162000c3b565b811462000c6257600080fd5b50565b60008151905062000c768162000c4b565b92915050565b60008060008060008060c0878903121562000c9c5762000c9b62000bd1565b5b600062000cac89828a0162000c24565b965050602062000cbf89828a0162000c24565b955050604062000cd289828a0162000c24565b945050606062000ce589828a0162000c24565b935050608062000cf889828a0162000c65565b92505060a062000d0b89828a0162000c24565b9150509295509295509295565b62000d238162000bf6565b82525050565b62000d348162000c3b565b82525050565b600060c08201905062000d51600083018962000d18565b62000d60602083018862000d18565b62000d6f604083018762000d18565b62000d7e606083018662000d18565b62000d8d608083018562000d29565b62000d9c60a083018462000d18565b979650505050505050565b600062000db48262000bd6565b9050919050565b62000dc68162000da7565b811462000dd257600080fd5b50565b60008151905062000de68162000dbb565b92915050565b60008060008060008060c0878903121562000e0c5762000e0b62000bd1565b5b600062000e1c89828a0162000dd5565b965050602062000e2f89828a0162000dd5565b955050604062000e4289828a0162000dd5565b945050606062000e5589828a0162000dd5565b935050608062000e6889828a0162000c65565b92505060a062000e7b89828a0162000dd5565b9150509295509295509295565b600082825260208201905092915050565b7f4176617461722063616e206e6f74206265207a65726f20616464726573730000600082015250565b600062000ed1601e8362000e88565b915062000ede8262000e99565b602082019050919050565b6000602082019050818103600083015262000f048162000ec2565b9050919050565b7f5461726765742063616e206e6f74206265207a65726f20616464726573730000600082015250565b600062000f43601e8362000e88565b915062000f508262000f0b565b602082019050919050565b6000602082019050818103600083015262000f768162000f34565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b600062000fc662000fc062000fba8462000f7d565b62000f9b565b62000f87565b9050919050565b62000fd88162000fa5565b82525050565b600060208201905062000ff5600083018462000fcd565b92915050565b7f53656e6465722073686f756c64206e6f74206265206164647265737328302900600082015250565b600062001033601f8362000e88565b9150620010408262000ffb565b602082019050919050565b60006020820190508181036000830152620010668162001024565b9050919050565b600060208201905062001084600083018462000d18565b92915050565b6000602082019050620010a1600083018462000d29565b92915050565b611f3d80620010b76000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063776d1a0111610097578063d4b8399211610066578063d4b8399214610224578063de4b054814610242578063f2fde38b14610260578063fd614f411461027c576100f5565b8063776d1a01146101b05780638da5cb5b146101cc578063938b5f32146101ea578063a4f9edbf14610208576100f5565b806346dbe06e116100d357806346dbe06e146101505780634d6f20131461016c5780635aef7de614610188578063715018a6146101a6576100f5565b8063086cfca8146100fa5780632b59241f146101165780633442a18b14610134575b600080fd5b610114600480360381019061010f9190611492565b6102ac565b005b61011e610378565b60405161012b91906114ce565b60405180910390f35b61014e60048036038101906101499190611492565b61039e565b005b61016a60048036038101906101659190611525565b6104b2565b005b61018660048036038101906101819190611492565b610527565b005b6101906105cc565b60405161019d91906114ce565b60405180910390f35b6101ae6105f0565b005b6101ca60048036038101906101c59190611492565b610604565b005b6101d46106d2565b6040516101e191906114ce565b60405180910390f35b6101f261070a565b6040516101ff9190611561565b60405180910390f35b610222600480360381019061021d91906116c2565b610720565b005b61022c610ad2565b60405161023991906114ce565b60405180910390f35b61024a610af8565b60405161025791906114ce565b60405180910390f35b61027a60048036038101906102759190611492565b610b1e565b005b61029660048036038101906102919190611777565b610ba4565b6040516102a3919061189f565b60405180910390f35b6102b4610de9565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f52ae88b092de36f87fb43fe794eb1381023b9c1bce563a871154022c63dce34260405160405180910390a35050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103a6610de9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c9061191e565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f54301631e962ee8d9655adadf9ff34e8027ac0a2a36ba16f0bf24f05ebb97a84600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516104a791906114ce565b60405180910390a150565b6104ba610de9565b80600360146101000a81548163ffffffff021916908363ffffffff1602179055507f2129f7c349bc9434d7098c42eb37a2df23cc694bf18743a747305cf2430bdb71600360149054906101000a900463ffffffff1660405161051c9190611561565b60405180910390a150565b61052f610de9565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f08c3335cb99fd4f1aef7ddc8d0fefc3709ad4c2b80690bcd09000387de510f5f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105c191906114ce565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105f8610de9565b6106026000610e70565b565b61060c610de9565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f90cc2f570a6eb594b1580ea3e41247d2d73a55281889e86bd4ec2fc29c7e62d660405160405180910390a35050565b6000806106dd610f47565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600360149054906101000a900463ffffffff1681565b600061072a610f6f565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156107785750825b9050600060018367ffffffffffffffff161480156107ad575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156107bb575080155b156107f2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156108425760018560000160086101000a81548160ff0219169083151502179055505b6000806000806000808b80602001905181019061085f9190611991565b955095509550955095509550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190611a6a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094090611ad6565b60405180910390fd5b61095233610f97565b61095b856102ac565b61096484610604565b61096d8361039e565b610976826104b2565b61097f81610527565b61098886610e70565b7ffbecf7f616d45ca601cf03f4f9ffe701a5075bb7372227842c496db02bd3aecd6109b16106d2565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360149054906101000a900463ffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610a6096959493929190611af6565b60405180910390a15050505050508315610aca5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610ac19190611bb0565b60405180910390a15b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b26610de9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b985760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610b8f91906114ce565b60405180910390fd5b610ba181610e70565b50565b60608383600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c2f576040517fc891745f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610cb6576040517f9f4f524800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360149054906101000a900463ffffffff1663ffffffff168163ffffffff1614610d0d576040517f629aec0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008087806020019051810190610d279190611c75565b935093509350935060008b905060008d1115610d8957610d8860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e8373ffffffffffffffffffffffffffffffffffffffff16610fab9092919063ffffffff16565b5b600080610d988787878761102a565b9150915081610dd3576040517fd27b44a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8099505050505050505050509695505050505050565b610df16110e4565b73ffffffffffffffffffffffffffffffffffffffff16610e0f6106d2565b73ffffffffffffffffffffffffffffffffffffffff1614610e6e57610e326110e4565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610e6591906114ce565b60405180910390fd5b565b6000610e7a610f47565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b610f9f6110ec565b610fa88161112c565b50565b611025838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610fde929190611d07565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506111b2565b505050565b60006060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635229073f878787876040518563ffffffff1660e01b815260040161108f9493929190611da7565b6000604051808303816000875af11580156110ae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110d79190611e2b565b9150915094509492505050565b600033905090565b6110f4611249565b61112a576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6111346110ec565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111a65760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161119d91906114ce565b60405180910390fd5b6111af81610e70565b50565b60006111dd828473ffffffffffffffffffffffffffffffffffffffff1661126990919063ffffffff16565b905060008151141580156112025750808060200190518101906112009190611e87565b155b1561124457826040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161123b91906114ce565b60405180910390fd5b505050565b6000611253610f6f565b60000160089054906101000a900460ff16905090565b60606112778383600061127f565b905092915050565b6060814710156112c657306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016112bd91906114ce565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516112ef9190611ef0565b60006040518083038185875af1925050503d806000811461132c576040519150601f19603f3d011682016040523d82523d6000602084013e611331565b606091505b509150915061134186838361134c565b925050509392505050565b6060826113615761135c826113db565b6113d3565b60008251148015611389575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156113cb57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016113c291906114ce565b60405180910390fd5b8190506113d4565b5b9392505050565b6000815111156113ee5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061145f82611434565b9050919050565b61146f81611454565b811461147a57600080fd5b50565b60008135905061148c81611466565b92915050565b6000602082840312156114a8576114a761142a565b5b60006114b68482850161147d565b91505092915050565b6114c881611454565b82525050565b60006020820190506114e360008301846114bf565b92915050565b600063ffffffff82169050919050565b611502816114e9565b811461150d57600080fd5b50565b60008135905061151f816114f9565b92915050565b60006020828403121561153b5761153a61142a565b5b600061154984828501611510565b91505092915050565b61155b816114e9565b82525050565b60006020820190506115766000830184611552565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115cf82611586565b810181811067ffffffffffffffff821117156115ee576115ed611597565b5b80604052505050565b6000611601611420565b905061160d82826115c6565b919050565b600067ffffffffffffffff82111561162d5761162c611597565b5b61163682611586565b9050602081019050919050565b82818337600083830152505050565b600061166561166084611612565b6115f7565b90508281526020810184848401111561168157611680611581565b5b61168c848285611643565b509392505050565b600082601f8301126116a9576116a861157c565b5b81356116b9848260208601611652565b91505092915050565b6000602082840312156116d8576116d761142a565b5b600082013567ffffffffffffffff8111156116f6576116f561142f565b5b61170284828501611694565b91505092915050565b6000819050919050565b61171e8161170b565b811461172957600080fd5b50565b60008135905061173b81611715565b92915050565b6000819050919050565b61175481611741565b811461175f57600080fd5b50565b6000813590506117718161174b565b92915050565b60008060008060008060c087890312156117945761179361142a565b5b60006117a289828a0161172c565b96505060206117b389828a01611762565b95505060406117c489828a0161147d565b94505060606117d589828a0161147d565b93505060806117e689828a01611510565b92505060a087013567ffffffffffffffff8111156118075761180661142f565b5b61181389828a01611694565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b60005b8381101561185a57808201518184015260208101905061183f565b60008484015250505050565b600061187182611820565b61187b818561182b565b935061188b81856020860161183c565b61189481611586565b840191505092915050565b600060208201905081810360008301526118b98184611866565b905092915050565b600082825260208201905092915050565b7f53656e6465722073686f756c64206e6f74206265206164647265737328302900600082015250565b6000611908601f836118c1565b9150611913826118d2565b602082019050919050565b60006020820190508181036000830152611937816118fb565b9050919050565b600061194982611434565b9050919050565b6119598161193e565b811461196457600080fd5b50565b60008151905061197681611950565b92915050565b60008151905061198b816114f9565b92915050565b60008060008060008060c087890312156119ae576119ad61142a565b5b60006119bc89828a01611967565b96505060206119cd89828a01611967565b95505060406119de89828a01611967565b94505060606119ef89828a01611967565b9350506080611a0089828a0161197c565b92505060a0611a1189828a01611967565b9150509295509295509295565b7f4176617461722063616e206e6f74206265207a65726f20616464726573730000600082015250565b6000611a54601e836118c1565b9150611a5f82611a1e565b602082019050919050565b60006020820190508181036000830152611a8381611a47565b9050919050565b7f5461726765742063616e206e6f74206265207a65726f20616464726573730000600082015250565b6000611ac0601e836118c1565b9150611acb82611a8a565b602082019050919050565b60006020820190508181036000830152611aef81611ab3565b9050919050565b600060c082019050611b0b60008301896114bf565b611b1860208301886114bf565b611b2560408301876114bf565b611b3260608301866114bf565b611b3f6080830185611552565b611b4c60a08301846114bf565b979650505050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b6000611b9a611b95611b9084611b57565b611b75565b611b61565b9050919050565b611baa81611b7f565b82525050565b6000602082019050611bc56000830184611ba1565b92915050565b600081519050611bda8161174b565b92915050565b6000611bf3611bee84611612565b6115f7565b905082815260208101848484011115611c0f57611c0e611581565b5b611c1a84828561183c565b509392505050565b600082601f830112611c3757611c3661157c565b5b8151611c47848260208601611be0565b91505092915050565b60028110611c5d57600080fd5b50565b600081519050611c6f81611c50565b92915050565b60008060008060808587031215611c8f57611c8e61142a565b5b6000611c9d87828801611967565b9450506020611cae87828801611bcb565b935050604085015167ffffffffffffffff811115611ccf57611cce61142f565b5b611cdb87828801611c22565b9250506060611cec87828801611c60565b91505092959194509250565b611d0181611741565b82525050565b6000604082019050611d1c60008301856114bf565b611d296020830184611cf8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611d7057611d6f611d30565b5b50565b6000819050611d8182611d5f565b919050565b6000611d9182611d73565b9050919050565b611da181611d86565b82525050565b6000608082019050611dbc60008301876114bf565b611dc96020830186611cf8565b8181036040830152611ddb8185611866565b9050611dea6060830184611d98565b95945050505050565b60008115159050919050565b611e0881611df3565b8114611e1357600080fd5b50565b600081519050611e2581611dff565b92915050565b60008060408385031215611e4257611e4161142a565b5b6000611e5085828601611e16565b925050602083015167ffffffffffffffff811115611e7157611e7061142f565b5b611e7d85828601611c22565b9150509250929050565b600060208284031215611e9d57611e9c61142a565b5b6000611eab84828501611e16565b91505092915050565b600081905092915050565b6000611eca82611820565b611ed48185611eb4565b9350611ee481856020860161183c565b80840191505092915050565b6000611efc8284611ebf565b91508190509291505056fea264697066735822122010db7ba0372d244993f688219dab5d46cad313abc10ab6934dad19ad49b8f1dd64736f6c63430008140033",
      "constructorArgs": {
        "types": [
          "address",
          "address",
          "address",
          "uint256",
          "uint256"
        ],
        "values": [
          "0x0000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000001",
          0,
          0
        ]
      },
      "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_avatar",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_target",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_originSender",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "_origin",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "_connext",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "name": "AddressEmptyCode",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "AddressInsufficientBalance",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ConnextOnly",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "FailedInnerCall",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidInitialization",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ModuleTransactionFailed",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NotInitializing",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "OriginOnly",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "OriginSenderOnly",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "OwnableInvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "OwnableUnauthorizedAccount",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "SafeERC20FailedOperation",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousAvatar",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newAvatar",
              "type": "address"
            }
          ],
          "name": "AvatarSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "connext",
              "type": "address"
            }
          ],
          "name": "ConnextSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "version",
              "type": "uint64"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "avatar",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "originSender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint32",
              "name": "origin",
              "type": "uint32"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "connext",
              "type": "address"
            }
          ],
          "name": "ModuleSetUp",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "originSender",
              "type": "address"
            }
          ],
          "name": "OriginSenderSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint32",
              "name": "origin",
              "type": "uint32"
            }
          ],
          "name": "OriginSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousTarget",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newTarget",
              "type": "address"
            }
          ],
          "name": "TargetSet",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "avatar",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "connext",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "origin",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "originSender",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_avatar",
              "type": "address"
            }
          ],
          "name": "setAvatar",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_connext",
              "type": "address"
            }
          ],
          "name": "setConnext",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "_origin",
              "type": "uint32"
            }
          ],
          "name": "setOrigin",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_originSender",
              "type": "address"
            }
          ],
          "name": "setOriginSender",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_target",
              "type": "address"
            }
          ],
          "name": "setTarget",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "initializeParams",
              "type": "bytes"
            }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "target",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_originSender",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "_origin",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "_callData",
              "type": "bytes"
            }
          ],
          "name": "xReceive",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "compilerInput": {
        "language": "Solidity",
        "sources": {
          "@gnosis.pm/safe-contracts/contracts/common/Enum.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Enum - Collection of enums\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Enum {\n    enum Operation {Call, DelegateCall}\n}\n"
          },
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
          },
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
          },
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
          },
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
          },
          "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
          },
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
          },
          "@openzeppelin/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
          },
          "contracts/ConnextModule.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.15;\n\nimport \"@gnosis-guild/zodiac-core/contracts/core/Module.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IXReceiver} from \"./interfaces/IXReceiver.sol\";\n\ncontract ConnextModule is Module, IXReceiver {\n    using SafeERC20 for IERC20;\n\n    event ModuleSetUp(\n        address owner,\n        address avatar,\n        address target,\n        address originSender,\n        uint32 origin,\n        address connext\n    );\n    event OriginSenderSet(address originSender);\n    event OriginSet(uint32 origin);\n    event ConnextSet(address connext);\n\n    error ConnextOnly();\n    error ModuleTransactionFailed();\n    error OriginSenderOnly();\n    error OriginOnly();\n\n    /// The ConnextHandler contract on this domain.\n    address public connext;\n    /// Address of the sender from origin.\n    address public originSender;\n    /// Origin Domain ID.\n    uint32 public origin;\n\n    /// @param _owner Address that will be able to call functions protected onlyOwner() functions.\n    /// @param _avatar Address that will receive all token transfered along with xReceive calls and that will ultimately execute messages passed.\n    /// @param _target Address on which this contract will call `execTransactionFromModule()`.\n    /// @param _originSender Address which is allowed to send calls to this contract from `origin` via `connext`.\n    /// @param _origin Identifier for the foreign chain form which this module sould receive messages.\n    /// @param _connext Address of the connext contract.\n    constructor(\n        address _owner,\n        address _avatar,\n        address _target,\n        address _originSender,\n        uint32 _origin,\n        address _connext\n    ) {\n        bytes memory initializeParams = abi.encode(_owner, _avatar, _target, _originSender, _origin, _connext);\n        setUp(initializeParams);\n    }\n\n    /// @dev Initialize function, will be triggered when a new proxy is deployed\n    /// @param initializeParams ABI encoded initialization params, in the same order as the parameters for this contract's constructor.\n    /// @notice Only callable once.\n    function setUp(bytes memory initializeParams) public override initializer {\n        (\n            address _owner,\n            address _avatar,\n            address _target,\n            address _originSender,\n            uint32 _origin,\n            address _connext\n        ) = abi.decode(initializeParams, (address, address, address, address, uint32, address));\n\n        require(_avatar != address(0), \"Avatar can not be zero address\");\n        require(_target != address(0), \"Target can not be zero address\");\n\n        __Ownable_init(msg.sender);\n        setAvatar(_avatar);\n        setTarget(_target);\n        setOriginSender(_originSender);\n        setOrigin(_origin);\n        setConnext(_connext);\n        _transferOwnership(_owner);\n\n        emit ModuleSetUp(owner(), avatar, target, originSender, origin, connext);\n    }\n\n    /// @dev Validates calls to ensure they were sent by the correct `connext` contract and that the `origin` and `originSender` are correct.\n    /// @param _originSender Address which is allowed to send calls to this contract from `origin` via `connext`.\n    /// @param _origin Identifier for the foreign chain form which this module sould receive messages.\n    modifier onlyConnext(address _originSender, uint32 _origin) {\n        if (msg.sender != connext) revert ConnextOnly();\n        if (_originSender != originSender) revert OriginSenderOnly();\n        if (_origin != origin) revert OriginOnly();\n        _;\n    }\n\n    /// @dev Receives xCalls from Connext.\n    /// @param _amount The ammount of `_asset` to be transferred to `avatar` with this call.\n    /// @param _asset Address of the asset to be transferred with this call.\n    /// @param _originSender The foreign address which sent this message.\n    /// @param _origin The identifier for the foreign chain where this message originated.\n    /// @return Returns `bytes memory returnData` if the call was successful.\n    /// @notice Only callable by `connext` address.\n    function xReceive(\n        bytes32,\n        uint256 _amount,\n        address _asset,\n        address _originSender,\n        uint32 _origin,\n        bytes memory _callData\n    ) external override onlyConnext(_originSender, _origin) returns (bytes memory) {\n        // Decode message\n        (address _to, uint256 _value, bytes memory _data, Enum.Operation _operation) = abi.decode(\n            _callData,\n            (address, uint256, bytes, Enum.Operation)\n        );\n\n        // Approve token transfer if tokens were passed in\n        IERC20 _token = IERC20(_asset);\n        if (_amount > 0) _token.safeTransfer(avatar, _amount);\n\n        // Execute transaction against target\n        (bool success, bytes memory returnData) = execAndReturnData(_to, _value, _data, _operation);\n        if (!success) revert ModuleTransactionFailed();\n        return returnData;\n    }\n\n    /// @dev Sets `originSender` address.\n    /// @param _originSender Address that will be allowed to send calls to this contract from `origin` via `connext`.\n    /// @notice Only callable by `owner`.\n    function setOriginSender(address _originSender) public onlyOwner {\n        require(_originSender != address(0), \"Sender should not be address(0)\");\n        originSender = _originSender;\n        emit OriginSenderSet(originSender);\n    }\n\n    /// @dev Sets `connext` address.\n    /// @param _connext Address that will be allowed to call `xReceive()` on this contract.\n    /// @notice Only callable by `owner`.\n    function setConnext(address _connext) public onlyOwner {\n        connext = _connext;\n        emit ConnextSet(connext);\n    }\n\n    /// @dev Sets `origin`.\n    /// @param _origin Uint32 identifier of the foreign chain where `originSender` will be able to initiate messages to this contract.\n    /// @notice Only callable by `owner`.\n    function setOrigin(uint32 _origin) public onlyOwner {\n        origin = _origin;\n        emit OriginSet(origin);\n    }\n}\n"
          },
          "contracts/interfaces/IXReceiver.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.15;\n\ninterface IXReceiver {\n  function xReceive(\n    bytes32 _transferId,\n    uint256 _amount,\n    address _asset,\n    address _originSender,\n    uint32 _origin,\n    bytes memory _callData\n  ) external returns (bytes memory);\n}\n"
          },
          "@gnosis-guild/zodiac-core/contracts/core/Module.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Enum} from \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\nimport {FactoryFriendly} from \"../factory/FactoryFriendly.sol\";\nimport {IAvatar} from \"../interfaces/IAvatar.sol\";\n\n/// @title Module Interface - A contract that can pass messages to a Module Manager contract if enabled by that contract.\nabstract contract Module is FactoryFriendly {\n  /// @dev Address that will ultimately execute function calls.\n  address public avatar;\n  /// @dev Address that this module will pass transactions to.\n  address public target;\n\n  /// @dev Emitted each time the avatar is set.\n  event AvatarSet(address indexed previousAvatar, address indexed newAvatar);\n  /// @dev Emitted each time the Target is set.\n  event TargetSet(address indexed previousTarget, address indexed newTarget);\n\n  /// @dev Sets the avatar to a new avatar (`newAvatar`).\n  /// @notice Can only be called by the current owner.\n  function setAvatar(address _avatar) public onlyOwner {\n    address previousAvatar = avatar;\n    avatar = _avatar;\n    emit AvatarSet(previousAvatar, _avatar);\n  }\n\n  /// @dev Sets the target to a new target (`newTarget`).\n  /// @notice Can only be called by the current owner.\n  function setTarget(address _target) public onlyOwner {\n    address previousTarget = target;\n    target = _target;\n    emit TargetSet(previousTarget, _target);\n  }\n\n  /// @dev Passes a transaction to be executed by the avatar.\n  /// @notice Can only be called by this contract.\n  /// @param to Destination address of module transaction.\n  /// @param value Ether value of module transaction.\n  /// @param data Data payload of module transaction.\n  /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n  function exec(\n    address to,\n    uint256 value,\n    bytes memory data,\n    Enum.Operation operation\n  ) internal virtual returns (bool success) {\n    return\n      IAvatar(target).execTransactionFromModule(to, value, data, operation);\n  }\n\n  /// @dev Passes a transaction to be executed by the target and returns data.\n  /// @notice Can only be called by this contract.\n  /// @param to Destination address of module transaction.\n  /// @param value Ether value of module transaction.\n  /// @param data Data payload of module transaction.\n  /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n  function execAndReturnData(\n    address to,\n    uint256 value,\n    bytes memory data,\n    Enum.Operation operation\n  ) internal virtual returns (bool success, bytes memory returnData) {\n    return\n      IAvatar(target).execTransactionFromModuleReturnData(\n        to,\n        value,\n        data,\n        operation\n      );\n  }\n}\n"
          },
          "@gnosis-guild/zodiac-core/contracts/factory/FactoryFriendly.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\npragma solidity >=0.7.0 <0.9.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract FactoryFriendly is OwnableUpgradeable {\n  function setUp(bytes memory initializeParams) public virtual;\n}\n"
          },
          "@gnosis-guild/zodiac-core/contracts/interfaces/IAvatar.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n/// @title Zodiac Avatar - A contract that manages modules that can execute transactions via this contract.\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Enum} from \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\ninterface IAvatar {\n  event EnabledModule(address module);\n  event DisabledModule(address module);\n  event ExecutionFromModuleSuccess(address indexed module);\n  event ExecutionFromModuleFailure(address indexed module);\n\n  /// @dev Enables a module on the avatar.\n  /// @notice Can only be called by the avatar.\n  /// @notice Modules should be stored as a linked list.\n  /// @notice Must emit EnabledModule(address module) if successful.\n  /// @param module Module to be enabled.\n  function enableModule(address module) external;\n\n  /// @dev Disables a module on the avatar.\n  /// @notice Can only be called by the avatar.\n  /// @notice Must emit DisabledModule(address module) if successful.\n  /// @param prevModule Address that pointed to the module to be removed in the linked list\n  /// @param module Module to be removed.\n  function disableModule(address prevModule, address module) external;\n\n  /// @dev Allows a Module to execute a transaction.\n  /// @notice Can only be called by an enabled module.\n  /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\n  /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\n  /// @param to Destination address of module transaction.\n  /// @param value Ether value of module transaction.\n  /// @param data Data payload of module transaction.\n  /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n  function execTransactionFromModule(\n    address to,\n    uint256 value,\n    bytes memory data,\n    Enum.Operation operation\n  ) external returns (bool success);\n\n  /// @dev Allows a Module to execute a transaction and return data\n  /// @notice Can only be called by an enabled module.\n  /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\n  /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\n  /// @param to Destination address of module transaction.\n  /// @param value Ether value of module transaction.\n  /// @param data Data payload of module transaction.\n  /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n  function execTransactionFromModuleReturnData(\n    address to,\n    uint256 value,\n    bytes memory data,\n    Enum.Operation operation\n  ) external returns (bool success, bytes memory returnData);\n\n  /// @dev Returns if an module is enabled\n  /// @return True if the module is enabled\n  function isModuleEnabled(address module) external view returns (bool);\n\n  /// @dev Returns array of modules.\n  /// @param start Start of the page.\n  /// @param pageSize Maximum number of modules that should be returned.\n  /// @return array Array of modules.\n  /// @return next Start of the next page.\n  function getModulesPaginated(\n    address start,\n    uint256 pageSize\n  ) external view returns (address[] memory array, address next);\n}\n"
          }
        },
        "settings": {
          "evmVersion": "paris",
          "optimizer": {
            "enabled": false,
            "runs": 200
          },
          "outputSelection": {
            "*": {
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "devdoc",
                "userdoc",
                "storageLayout",
                "evm.gasEstimates"
              ],
              "": [
                "ast"
              ]
            }
          },
          "metadata": {
            "useLiteralContent": true
          }
        }
      }
    }
  }
}